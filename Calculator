package mycalculator;

//import java.util.InputMismatchException;
import java.io.IOException;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Main {
    static Scanner scanner = new Scanner(System.in);
    static int actionIndex = -1;
    static String[] actions = {"+", "-", "/", "*"};
    static String[] regexActions = {"\\+", "-", "/", "\\*"};
    static int a, b;
    static int result;
    static boolean contains1;
    static boolean contains2;

    public static void main(String[] args) throws IOException {

        System.out.print("Введите выражение: ");
        String userInput = scanner.nextLine();
        System.out.println(calc(userInput));


    }

    public static String calc(String userInput) {

        for (int i = 0; i < actions.length; i++) {
            if (userInput.contains(actions[i])) {
                actionIndex = i;
                break;
            }
        }

        if (actionIndex == -1) {
            try {
                throw new IOException();
            } catch (IOException e) {
                System.out.println("throws Exception //т.к. строка не является математической операцией");
            }

        }

        List list = Arrays.asList("I", "II", "III", "IV", "V", "VI", "VII", "VII", "VIII", "XI", "X");
        String[] separation = userInput.split(regexActions[actionIndex]);
        if (list.contains(separation[0]) == list.contains(separation[1])) {
            for (int i = 0; i < separation.length; i++) {
                if (i == 2) {
                    try {
                        throw new IOException();
                    } catch (IOException e) {
                        System.out.println("throws Exception //т.к. формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)");
                    }

                }
            }
            contains1 = list.contains(separation[0]);
            contains2 = list.contains(separation[1]);
            if (list.contains(separation[0]) == false || list.contains(separation[1]) == false) {

                a = Integer.parseInt(separation[0]);
                b = Integer.parseInt(separation[1]);

                switch (actions[actionIndex]) {
                    case "+" -> result = a + b;
                    case "-" -> result = a - b;
                    case "*" -> result = a * b;
                    default -> result = a / b;
                }
                System.out.println(result);

            }

            if (list.contains(separation[0]) == true && list.contains(separation[1]) == true) {
                String numberA = separation[0];
                String numberB = separation[1];
                a = romanToInt(numberA);
                b = romanToInt(numberB);
                switch (actions[actionIndex]) {
                    case "+" -> result = a + b;
                    case "-" -> result = a - b;
                    case "*" -> result = a * b;
                    default -> result = a / b;
                }
                if (result < 0) {
                    try {
                        throw new IOException();
                    } catch (IOException e) {
                        System.out.println("throws Exception //т.к. в римской системе нет отрицательных чисел");
                    }

                }
                int x = result;
                int units = x % 10;
                int tens = (x % 100) / 10;
                int hundreds = (x % 1000) / 100;

                System.out.println(Hundreds(hundreds) + Tens(tens) + Units(units));
            }

        } else {
            try {
                throw new IOException();
            } catch (IOException e) {
                System.out.println("throws Exception //т.к. используются одновременно разные системы счисления");
            }
        }
        return userInput;
    }

    public static int getArabian(char roman) {
        if ('I' == roman) return 1;
        else if ('V' == roman) return 5;
        else if ('X' == roman) return 10;
        else if ('L' == roman) return 50;
        else if ('C' == roman) return 100;
        else if ('D' == roman) return 500;
        else if ('M' == roman) return 1000;
        return 0;
    }

    public static int romanToInt(String s) {
        int end = s.length() - 1;
        char[] arr = s.toCharArray();
        int arabian;
        int result = getArabian(arr[end]);
        for (int i = end - 1; i >= 0; i--) {
            arabian = getArabian(arr[i]);

            if (arabian < getArabian(arr[i + 1])) {
                result -= arabian;
            } else {
                result += arabian;
            }
        }
        return result;
    }

    public static String Units(int units) {
        String s_units = "";
        switch (units) {
            case 1 -> s_units = "I";
            case 2 -> s_units = "II";
            case 3 -> s_units = "III";
            case 4 -> s_units = "IV";
            case 5 -> s_units = "V";
            case 6 -> s_units = "VI";
            case 7 -> s_units = "VII";
            case 8 -> s_units = "VIII";
            case 9 -> s_units = "IX";
        }
        return s_units;
    }

    public static String Tens(int tens) {
        String s_tens = "";
        switch (tens) {
            case 1 -> s_tens = "X";
            case 2 -> s_tens = "XX";
            case 3 -> s_tens = "XXX";
            case 4 -> s_tens = "XL";
            case 5 -> s_tens = "L";
            case 6 -> s_tens = "LX";
            case 7 -> s_tens = "LXX";
            case 8 -> s_tens = "LXXX";
            case 9 -> s_tens = "XC";
        }
        return s_tens;
    }

    public static String Hundreds(int hundreds) {
        String s_hundreds = "";
        if (hundreds == 1) {
            s_hundreds = "C";
        }
        return s_hundreds;
    }
}
